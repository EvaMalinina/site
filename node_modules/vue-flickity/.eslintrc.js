const restrictedGlobals = require('eslint-restricted-globals')
  .filter(name => name !== 'self');

module.exports = {
  parserOptions: {
    parser: 'babel-eslint',
    sourceType: 'module',
  },
  extends: ['airbnb-base', 'plugin:vue/recommended'],
  globals: {
    chrome: true,
    it: true,
    describe: true,
    beforeAll: true,
    beforeEach: true,
    afterEach: true,
    afterAll: true,
    before: true,
    after: true,
    chai: true,
    sinon: true,
    expect: true,
    jest: true,
    test: true,
  },
  env: {
    browser: true,
    node: true,
  },
  rules: {
    'no-restricted-globals': ['error'].concat(restrictedGlobals),
    'no-underscore-dangle': 0,
    'no-mixed-operators': 0,
    'max-len': ['error', {
      code: 120,
      ignoreUrls: true,
      ignoreStrings: true,
      ignoreComments: true,
      ignoreTemplateLiterals: true,
      ignoreRegExpLiterals: true,
      ignorePattern: "trans\\(|transChoice\\("
    }],
    'arrow-parens': ['error', 'as-needed'],
    'comma-dangle': ['error', 'always-multiline'],
    indent: ['error', 2, { SwitchCase: 1 }],
    'no-plusplus': 0,
    curly: ['error', 'all'],
    'no-return-assign': 0,
    'prefer-destructuring': 0,
    'import/extensions': 0,
    'consistent-return': 0,
    'operator-linebreak': [2, 'after', {"overrides": { "?": "before", ":": "before" }}],
    'spaced-comment': 0,
    'global-require': 0,
    'dot-notation': [2, { allowPattern: '^[a-z]+(_[a-z]+)+$' }],
    'import/no-extraneous-dependencies': 0,
    'import/no-unresolved': 0,
    'import/prefer-default-export': 0,
    'space-before-function-paren': ['error', 'never'],
    'no-param-reassign': ['error', { props: false }],
    'class-methods-use-this': 0,
    'no-restricted-syntax': ['error', 'WithStatement'],
    'linebreak-style': process.env.NODE_ENV !== 'production' ? 'off' : ['error', 'unix'],
    'no-debugger': 1,
    'no-console': process.env.NODE_ENV !== 'production' ? 1 : 2,
    'valid-jsdoc': [
      'error',
      {
        prefer: { return: 'return' },
        preferType: { Boolean: 'boolean', Function: 'function', Number: 'number', Object: 'object', String: 'string' },
        requireReturn: false,
        requireParamDescription: false,
        requireReturnDescription: false,
      },
    ],
    'vue/max-attributes-per-line': 0,
    'vue/require-default-prop': 0,
    'vue/html-end-tags': 'error',
    'vue/no-multi-spaces': 'error',
    'vue/html-self-closing': [
      'error',
      {
        html: {
          void: 'always',
          normal: 'always',
          component: 'always',
        },
        svg: 'always',
        math: 'always',
      },
    ],
    'vue/html-indent': [
      'error',
      2,
      {
        attribute: 1,
        closeBracket: 0,
        ignores: [],
      },
    ],
    'vue/attribute-hyphenation': ['error', 'always'],
    'vue/order-in-components': [
      'error',
      {
        order: [
          'el',
          'name',
          'parent',
          'functional',
          ['delimiters', 'comments'],
          ['components', 'directives', 'filters'],
          'extends',
          'mixins',
          'inheritAttrs',
          'model',
          ['props', 'propsData'],
          'data',
          'computed',
          'watch',
          'LIFECYCLE_HOOKS',
          'methods',
          ['template', 'render'],
          'renderError',
        ],
      },
    ],
    'vue/name-property-casing': ['error', 'kebab-case'],
    'vue/require-prop-types': ['error'],
    'vue/require-valid-default-prop': ['error'],
  },
};